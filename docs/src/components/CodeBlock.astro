---
import { Markdown } from "astro-remote";
import CodeSpan from "./CodeSpan.astro";
import Heading from "./Heading.astro";
import Note from "./Note.astro";
import { Code } from "@astrojs/starlight/components";
import { transformerTwoslash, rendererRich } from "@shikijs/twoslash";
import { codeToHtml } from "shiki";
import "@shikijs/twoslash/style-rich.css";
import "./style-rich.css";

export const theme = "material-theme-ocean";

export let html = ``;
const {
  lang,
  code: rawCode,
  showLines = false,
  twoslash = false,
} = Astro.props;

// Process code first before deciding how to render it
const processedCode = applyCut(mapPaths(rawCode));

// Use Twoslash only when explicitly requested for TypeScript/TSX
if (twoslash && ["ts", "tsx"].includes(lang)) {
  html = await codeToHtml(processedCode, {
    lang,
    theme,
    transformers: [transformerTwoslash()],
  });
}
//  else if (lang !== "md") {
//   // Generate regular syntax highlighted HTML for non-markdown code
//   html = await codeToHtml(processedCode, {
//     lang,
//     theme,
//   });
// }

function applyCut(s: string) {
  return s.split(/\/\/ \-\-\-cut\-\-\-\s*/).pop() ?? "";
}
function mapPaths(s: string) {
  // return s.replace(/import \* as (\w+) from "(\w+)"/g, 'import $1 from "$2"')
  return s.replace(/\.\.\/src/g, "matchina");
}
---

{
  !!showLines && (
    <div>
      {rawCode.split("\n").length} lines,
      {rawCode.length} chars
    </div>
  )
}
{
  !!html ? (
    <div set:html={html} />
  ) : lang === "md" ? (
    <Markdown
      content={rawCode}
      components={{ Heading, CodeBlock, CodeSpan, Note }}
    />
  ) : (
    <Code
      code={applyCut(mapPaths(rawCode))}
      lang={lang}
      showLines={showLines}
    />
  )
}
